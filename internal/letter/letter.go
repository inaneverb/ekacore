// Copyright Â© 2020. All rights reserved.
// Author: Ilya Stroy.
// Contacts: qioalice@gmail.com, https://github.com/qioalice
// License: https://opensource.org/licenses/MIT

package letter

import (
	"unsafe"

	"github.com/qioalice/ekago/v2/ekasys"
	"github.com/qioalice/ekago/v2/internal/field"

	"github.com/modern-go/reflect2"
)

type (
	// Letter is a core of Logger's Entry or an Error's object.
	//
	// Both of Logger's Entry and Error's object may (and should) contain
	// message's body and some arguments. These fields are public and they
	// have absolutely the same logic.
	//
	// When you can access 'Message' or 'Field' outside it's considered generated.
	// Until then these fields may contain some temporary data that is useful
	// to finish transforming input parse arguments to 'Message' and 'Fields'.
	Letter struct {

		// StackTrace is just stack trace, nothing more.
		StackTrace ekasys.StackTrace

		// Items is the most interest TODO
		Items *LetterItem // linked list

		// lastItem just points to the last item of Items linked list.
		lastItem *LetterItem

		// SystemFields contains only important system meta information,
		// that could be generated by *Error's or *Logger's methods.
		//
		// It guarantees, that all these field has set KIND_FLAG_SYSTEM bit
		// at the their 'Kind' property.
		//
		// See https://github.com/qioalice/ekago/internal/field/field.go ,
		// https://github.com/qioalice/ekago/ekaerr/error_pool_private ,
		// https://github.com/qioalice/ekago/ekalog/entry_pool_private .
		SystemFields []field.Field

		// something is a special field where any user of that internal package
		// may use for its own needs.
		something unsafe.Pointer
	}
)

var (
	// TypesBeingIgnoredForParsing is an array of types that will be ignored
	// at the arguments parsing in ParseTo() function and fills by
	// InitRestrictedTypesBeingParsed() function.
	TypesBeingIgnoredForParsing []reflect2.Type
)

// L_SetLastItem is just 'l'.lastItem = 'item'. Returns modified 'l'.
//
// It's a function, not a method, because it's a part of internal package and
// I want to use this inside other ekago's packages (can't make it private method),
// but don't want user to use this method (can't make it public method).
//
// Requirements:
// 'l' != nil. Otherwise UB (may panic).
//
//noinspection GoSnakeCaseUsage
func L_SetLastItem(l *Letter, item *LetterItem) *Letter {
	l.lastItem = item
	return l
}

// L_GetLastItem just returns 'l'.lastItem.
//
// It's a function, not a method, because it's a part of internal package and
// I want to use this inside other ekago's packages (can't make it private method),
// but don't want user to use this method (can't make it public method).
//
// Requirements:
// 'l' != nil. Otherwise UB (may panic).
//
//noinspection GoSnakeCaseUsage
func L_GetLastItem(l *Letter) *LetterItem {
	return l.lastItem
}

// L_SetSomething is just 'l'.something = 'ptr'. Returns modified 'l'.
//
// It's a function, not a method, because it's a part of internal package and
// I want to use this inside other ekago's packages (can't make it private method),
// but don't want user to use this method (can't make it public method).
//
// Requirements:
// 'l' != nil. Otherwise UB (may panic).
//
//noinspection GoSnakeCaseUsage
func L_SetSomething(l *Letter, ptr unsafe.Pointer) *Letter {
	l.something = ptr
	return l
}

// L_GetSomething just returns 'l'.something.
//
// It's a function, not a method, because it's a part of internal package and
// I want to use this inside other ekago's packages (can't make it private method),
// but don't want user to use this method (can't make it public method).
//
// Requirements:
// 'l' != nil. Otherwise UB (may panic).
//
//noinspection GoSnakeCaseUsage
func L_GetSomething(l *Letter) unsafe.Pointer {
	return l.something
}
