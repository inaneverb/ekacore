// Copyright © 2020. All rights reserved.
// Author: Ilya Stroy.
// Contacts: qioalice@gmail.com, https://github.com/qioalice
// License: https://opensource.org/licenses/MIT

package ekalog

import (
	"time"

	"github.com/qioalice/ekago/v2/internal/ekaletter"
)

//
// It's possible when
// case 14. log finisher called with Error and field(s) at the same time. We won't add
// passed log fields to the error's ones 'cause we want to keep attached error
// unmodified (and do not want to make copy because of optimization purposes).

// CASE 15:
// "Possibly incomplete stacktrace when error is attached".
// Stacktrace could be generated by the logger if an attached error doesn't have one.
//
// In this case еhe stacktrace can be "incomplete" because the attached error
// can be generated in the internal function and returned to the outside,
// where the log entry is generated.

type (
	// TODO
	Entry struct {

		// TODO
		l *Logger // The logger this entry created by or belongs to. Private.

		// TODO
		// Public because of providing access from the user's Integrator.
		LogLetter *ekaletter.Letter

		// TODO
		// Public because of providing access from the user's Integrator.
		ErrLetter *ekaletter.Letter

		// Level indicates how important occurred event (this log entry represents) is.
		// Assigned in log finisher.
		Level Level

		// Time contains the time when an event occurred this log entry represents.
		// Generated automatically by time.Now() call in log finisher.
		Time time.Time

		needSetFinalizer bool

		//ssf  int // skip stack frames
		//ssfp int // skip stack frames private ("3" by default)
		//
		//// Because stacktrace could be not empty in both cases of
		//// "attach caller info to log entry", "attack stacktrace to log entry",
		//// we need to determine which one case we have (or both of them).
		//
		//NeedCaller bool // true if "attach caller info to log entry"
		//NeedStackTrace bool // true if "attach stacktrace to log entry"
	}
)

var (
	// DefaultFlags is the Flag's set that will be used as default flags
	// for each *LetterItem that is created for Entry's *Letter.
	DefaultFlags = FLAG_ALLOW_UNNAMED_NIL

	// TODO: Maybe these flags must be protected by the mutex?
)
